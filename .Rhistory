labels = mybreaks,
bins = length(mybreaks)-1,
guide = guide_colourbar(frame.colour = "black",
ticks.colour = "black", # you can also remove the ticks with NA
barwidth=20)
) +
theme(legend.position = "bottom")
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = 100*density)) +
scale_fill_discrete_gradient(
colours = mycols,
limits = c(-2,11),
breaks = mybreaks,
# labels = mybreaks,
bins = length(mybreaks)-1,
guide = guide_colourbar(frame.colour = "black",
ticks.colour = "black", # you can also remove the ticks with NA
barwidth=20)
) +
theme(legend.position = "bottom")
faithfuld$rescaled <- 100*faithfuld$density
View(faithfuld)
max(faithfuld$rescaled)
?scales::rescale
faithfuld$rescaled <- scales::rescale(100*faithfuld$density, from = c(-2,11))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = rescaled)) +
scale_fill_discrete_gradient()
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = rescaled)) +
scale_fill_discrete_gradient(
colours = mycols)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = rescaled)) +
scale_fill_discrete_gradient(
colours = mycols,
limits = c(0,1)
breaks = seq(0, 1, 1/13),
labels = mybreaks,
bins = length(mybreaks)-1,
guide = guide_colourbar(frame.colour = "black",
ticks.colour = "black", # you can also remove the ticks with NA
barwidth=20)
) +
theme(legend.position = "bottom")
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = rescaled)) +
scale_fill_discrete_gradient(
colours = mycols,
limits = c(0,1))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = rescaled)) +
scale_fill_discrete_gradient(
colours = mycols,
limits = c(0,1),
breaks = seq(0, 1, 1/13))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = rescaled)) +
scale_fill_discrete_gradient(
colours = mycols,
limits = c(0,1),
breaks = seq(0, 1, 1/13),
labels = mybreaks)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = rescaled)) +
scale_fill_discrete_gradient(
colours = mycols,
limits = c(0,1),
breaks = seq(0, 1, 1/14),
labels = mybreaks)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = rescaled)) +
scale_fill_discrete_gradient(
colours = mycols,
bins = length(mybreaks)-1,
limits = c(0,1))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = rescaled)) +
scale_fill_discrete_gradient(
colours = mycols,
bins = length(mybreaks)-1,
limits = c(0,1),
breaks = seq(0, 1, 1/14))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = rescaled)) +
scale_fill_discrete_gradient(
colours = mycols,
bins = length(mybreaks)-1,
limits = c(0,1),
breaks = seq(0, 1, 1/14),
labels = mybreaks)
faithfuld$cut_dens <- cut(100*faithfuld$density, mybreaks)
View(faithfuld)
faithfuld$cut_dens
faithfuld$cut_dens <- cut(100*faithfuld$density, mybreaks, labels = mybreaks)
length(mybreaks)
faithfuld$cut_dens <- cut(100*faithfuld$density, mybreaks, labels = mybreaks[-1])
View(faithfuld)
faithfuld$cut_dens <- as.integer(cut(100*faithfuld$density, mybreaks)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = rescaled)) +
scale_fill_discrete_gradient(
colours = mycols,
bins = length(mybreaks)-1,
limits = c(0,1),
breaks = seq(0, 1, 1/14),
labels = mybreaks)
guide = guide_colourbar(frame.colour = "black",
ticks.colour = "black", # you can also remove the ticks with NA
barwidth=20)
) +
theme(legend.position = "bottom")
faithfuld$cut_dens <- as.integer(cut(100*faithfuld$density, mybreaks))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = cut_dens)) +
scale_fill_discrete_gradient(
colours = mycols)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = cut_dens)) +
scale_fill_discrete_gradient(
colours = mycols,
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = density)) +
scale_fill_discrete_gradient(
colours = mycols,
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = 100*density)) +
scale_fill_discrete_gradient(
colours = mycols,
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = cut_dens)) +
scale_fill_discrete_gradient(
colours = mycols,
labels = mybreaks,
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = cut_dens)) +
scale_fill_discrete_gradient(
colours = mycols,
labels = mybreaks[-1],
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = cut_dens)) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(1, 11, 1/14),
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = cut_dens)) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(1, 11, 11/14),
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = cut_dens)) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(1, 11, 11/14),
limits = c(0,11),
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = cut_dens)) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 11, 11/14),
limits = c(0,11),
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = cut_dens)) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 11, 11/14),
limits = c(0,11),
bins = length(mybreaks)-1,
labels = mybreaks[-1])
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = cut_dens)) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 11, 11/14),
limits = c(0,11),
bins = length(mybreaks)-1,
labels = mybreaks)
mycols <- rev(colorRampPalette(brewer.pal(11, "Spectral"))(length(mybreaks)-1))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = cut_dens)) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 11, 11/14),
limits = c(0,11),
bins = length(mybreaks)-1,
labels = mybreaks)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = cut_dens)) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 11, 11/14),
limits = c(0,11),
bins = length(mybreaks)-1)
faithfuld$cut_dens <- cut(100*faithfuld$density, mybreaks)
View(faithfuld)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = as.integer(cut_dens))) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 11, 11/14),
limits = c(0,11),
bins = length(mybreaks)-1)
levels(faithfuld$cut_dens)
as.integer(fait\)
as.integer(faithfuld$cut_dens)
max(faithfuld$cut_dens)
unique(faithfuld$cut_dens)
levels(faithfuld$cut_dens)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = as.integer(cut_dens))) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 11, 11/14),
limits = c(0,15),
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = as.integer(cut_dens))) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 11, 11/14),
limits = c(0,14),
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = as.integer(cut_dens))) +
scale_fill_discrete_gradient(
colours = mycols,
# breaks = seq(0, 11, 11/14),
limits = c(0,15),
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = as.integer(cut_dens))) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 15, 1),
limits = c(0,15),
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = as.integer(cut_dens))) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 14, 1),
limits = c(0,15),
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = as.integer(cut_dens))) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 16, 1),
limits = c(0,15),
bins = length(mybreaks)-1)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = as.integer(cut_dens))) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 15, 1),
limits = c(0,15),
bins = length(mybreaks))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = as.integer(cut_dens))) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 15, 1),
limits = c(0,15),
bins = length(mybreaks),
labels = mybreaks)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = as.integer(cut_dens))) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 14, 1),
limits = c(0,14),
bins = length(mybreaks)-1,
labels = mybreaks)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = as.integer(cut_dens))) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(0, 14, 1),
limits = c(0,14),
bins = length(mybreaks)-1,
labels = mybreaks,
guide = guide_colourbar(frame.colour = "black",
ticks.colour = "black", # you can also remove the ticks with NA
barwidth=20)
) +
theme(legend.position = "bottom")
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour_fill(aes(z = as.integer(cut_dens))) +
scale_fill_discrete_gradient(
colours = mycols,
breaks = seq(1, 15, 1), # breaks and limits based on factor levels!
limits = c(1,15),
bins = length(mybreaks)-1,
labels = mybreaks,
guide = guide_colourbar(frame.colour = "black",
ticks.colour = "black", # you can also remove the ticks with NA
barwidth=20)
) +
theme(legend.position = "bottom")
reprex:::reprex_addin()
library(usmap)
install.packages("usmap")
library(usmap)
library(ggplot2)
fips <- seq(45001,45091,2)
value <- rnorm(length(fips),3000,10000)
data <- data.frame(fips,value)
data$value[data$value<0]=0
data.frame(fips,value)
vignette("ggplot2 internal programming guidelines")
data <- data_frame(fips,value)
data <- base::data.frame(fips,value)
data$value[data$value<0]=0
plot_usmap(regions='counties',data=data,values="value",include="SC") +
scale_fill_stepsn(breaks=c(as.numeric(quantile(data$value,seq(.25,1,.25)))),
colors=c("blue","green","yellow","red"))
plot_usmap(regions='counties',data=data,values="value",include="SC") +
scale_fill_stepsn(breaks=c(as.numeric(quantile(data$value,seq(0,1,.1)))),
colors=c("blue","green","yellow","red"))
mydat <- base::data.frame(fips,value)
mydat$value[data$value<0]=0
View(mydat)
ecdf(mydat$value)
ecdf(mydat$value)(mydat$value)
mydat$perc <- ecdf(mydat$value)(mydat$value)
mydat$perc_cuts <- cuts(ecdf(mydat$value)(mydat$value), seq(0,1,.1))
mydat$perc_cuts <- cut(ecdf(mydat$value)(mydat$value), seq(0,1,.1))
View(mydat)
levels(mydat$perc_cuts)
plot_usmap(regions='counties',
data=data,
values="perc_cuts",include="SC") +
scale_fill_binned()
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_binned()
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_binned()
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps()
mydat$perc_cuts <- as.integer(cut(ecdf(mydat$value)(mydat$value), seq(0,1,.1)))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps()
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps(breaks=0:10)
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps(breaks=0:10, labels = unique(mydat$perc_cuts))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps(breaks=1:10, labels = unique(mydat$perc_cuts))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps(breaks=1:10, labels = 1:10)
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps(breaks=1:10, labels = seq(0,1,.1))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps(breaks=1:10, labels = seq(0.1,1,.1))
mydat$perc_cuts <- as.integer(cut(ecdf(mydat$value)(mydat$value), seq(0,1,.25)))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps()
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps(breaks= 1:4, labels = seq(0.25,1,.25))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps(breaks= 1:4, labels = seq(0.25,1,.25),
colors=c("blue","green","yellow","red"))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_stepsn(breaks= 1:4, labels = seq(0.25,1,.25),
colors=c("blue","green","yellow","red"))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_stepsn(breaks= 1:4, labels = seq(0.25,1,.25),
colors=c("blue","green","yellow","red"),
guide = guide_colorsteps(even.steps = FALSE))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_stepsn(breaks= 1:4, labels = seq(0.25,1,.25),
colors=c("blue","green","yellow","red"),
limits = c(0,1),
guide = guide_colorsteps(even.steps = FALSE))
View(mydat)
plot_usmap(regions='counties',
data = mydat,
values="perc_cuts",include="SC") +
scale_fill_stepsn(breaks= 1:4, labels = seq(0.25,1,.25),
colors=c("blue","green","yellow","red"),
# limits = c(0,1),
guide = guide_colorsteps(even.steps = FALSE))
plot_usmap(regions='counties',
data = mydat,
values="perc_cuts",include="SC") +
scale_fill_stepsn(breaks= 0:4, labels = seq(0,1,.25),
colors=c("blue","green","yellow","red"),
limits = c(0,1),
guide = guide_colorsteps(even.steps = FALSE))
plot_usmap(regions='counties',
data = mydat,
values="perc_cuts",include="SC") +
scale_fill_stepsn(breaks= 0:4, labels = seq(0,1,.25),
colors=c("blue","green","yellow","red"),
limits = c(0,1),
guide = guide_colorsteps(even.steps = FALSE))
plot_usmap(regions='counties',
data = mydat,
values="perc_cuts",include="SC") +
scale_fill_stepsn(breaks= 1:4, labels = seq(0,1,.25),
colors=c("blue","green","yellow","red"),
limits = c(0,1),
guide = guide_colorsteps(even.steps = FALSE))
plot_usmap(regions='counties',
data = mydat,
values="perc_cuts",include="SC") +
scale_fill_stepsn(breaks= 1:4, labels = seq(0.25,1,.25),
colors=c("blue","green","yellow","red"),
limits = c(0,1),
guide = guide_colorsteps(even.steps = FALSE))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_stepsn(breaks= 1:4, labels = seq(0.25,1,.25),
colors=c("blue","green","yellow","red"),
guide = guide_colorsteps(even.steps = FALSE))
reprex:::reprex_addin()
fips <- seq(45001,45091,2)
value <- rnorm(length(fips),3000,10000)
mydat <- base::data.frame(fips,value)
mydat$value[mydat$value<0]=0
mydat$perc_cuts <- as.integer(cut(ecdf(mydat$value)(mydat$value), seq(0,1,.25)))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_stepsn(breaks= 0:4, labels = seq(0.25,1,.25),
colors=c("blue","green","yellow","red"),
guide = guide_colorsteps(even.steps = FALSE))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_stepsn(breaks= 1:4, labels = seq(0.25,1,.25),
colors=c("blue","green","yellow","red"),
guide = guide_colorsteps(even.steps = FALSE))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_stepsn(breaks= 1:4, labels = seq(0.25, 1, .25))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps(breaks= 1:4, labels = seq(0.25, 1, .25),
colors=c("blue","green","yellow","red"),
guide = guide_colorsteps(even.steps = FALSE))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps(breaks= 1:4, labels = seq(0.25, 1, .25))
seq(0.25, 1, .25)
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps(breaks= 1:4)
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps(breaks= 1:4, limits = c(0,4))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps(breaks= 1:4, limits = c(0,4), labels = 1:4)
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_steps(breaks= 1:4, limits = c(0,4), labels = seq(.25, 1, .25))
plot_usmap(regions='counties',
data=mydat,
values="perc_cuts",include="SC") +
scale_fill_stepsn(breaks= 1:4, limits = c(0,4), labels = seq(.25, 1, .25),
colors=c("blue","green","yellow","red"),
guide = guide_colorsteps(even.steps = FALSE))
