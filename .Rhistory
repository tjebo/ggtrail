head(seq_y, -1)
}
})
}
## THis is also a bit painful and might cause other bugs that I haven't
## discovered yet.
if (length(unlist(new_y)) < length(new_x)) {
newdat <- data.frame(
x = new_x,
y = rep_len(unlist(new_y), length.out = length(new_x))
)
} else {
newdat <- data.frame(x = new_x, y = unlist(new_y))
}
newdat <- dplyr::mutate(newdat, xend = dplyr::lead(x), yend = dplyr::lead(y))
newdat <- tidyr::drop_na(newdat, xend)
newdat$color <- colors
newdat
},
required_aes = c("x", "y")
)
stat_colortrail <- function(mapping = NULL, data = NULL, geom = "segment",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, colors = c("red", "green"),
rep_length = 1, ...) {
layer(
stat = StatColorTrail, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, colors = colors)
)
}
dat <- data.frame(x = seq(2,10, 2), y = seq(4, 20, 4))
ggplot(dat, aes(x, y)) +
stat_colortrail(colors = c("red", "green"))
StatColorTrail <- ggproto("StatColorTrail", Stat,
compute_group = function(data, scales, params, alt_cols = c("red", "green"),
rep_length = 1) {
x <- data$x
y <- data$y
## create new x for each tiny segment
length_seg <- rep_length / length(alt_cols)
new_x <- seq(min(x, na.rm = TRUE), x[length(x)], length_seg)
## now we need to interpolate y values for each new x
## This is different depending on how many x and new x you have
if (length(new_x) < length(x)) {
ind_int <- findInterval(new_x, x)
new_y <- sapply(seq_along(ind_int), function(i) {
if (y[ind_int[i]] == y[ind_int[length(ind_int)]]) {
y[ind_int[i]]
} else {
seq_y <- seq(y[ind_int[i]], y[ind_int[i] + 1], length.out = length(alt_cols))
head(seq_y, -1)
}
})
} else {
ind_int <- findInterval(new_x, x)
rle_int <- rle(ind_int)
new_y <- sapply(rle_int$values, function(i) {
if (y[i] == y[max(rle_int$values)]) {
y[i]
} else {
seq_y <- seq(y[i], y[i + 1], length.out = rle_int$lengths[i] + 1)
head(seq_y, -1)
}
})
}
## THis is also a bit painful and might cause other bugs that I haven't
## discovered yet.
if (length(unlist(new_y)) < length(new_x)) {
newdat <- data.frame(
x = new_x,
y = rep_len(unlist(new_y), length.out = length(new_x))
)
} else {
newdat <- data.frame(x = new_x, y = unlist(new_y))
}
newdat <- dplyr::mutate(newdat, xend = dplyr::lead(x), yend = dplyr::lead(y))
newdat <- tidyr::drop_na(newdat, xend)
newdat$color <- alt_cols
newdat
},
required_aes = c("x", "y")
)
stat_colortrail <- function(mapping = NULL, data = NULL, geom = "segment",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, alt_cols = c("red", "green"),
rep_length = 1, ...) {
layer(
stat = StatColorTrail, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, alt_cols = alt_cols)
)
}
dat <- data.frame(x = seq(2,10, 2), y = seq(4, 20, 4))
ggplot(dat, aes(x, y)) +
stat_colortrail(alt_cols = c("black", "white"))
ggplot(dat, aes(x, y)) +
stat_colortrail(alt_cols = c("black", "white", "green"))
ggplot(dat, aes(x, y)) +
stat_colortrail(alt_cols = c("black", "white", "green"), rep_length = .5)
stat_colortrail <- function(mapping = NULL, data = NULL, geom = "segment",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, alt_cols = c("red", "green"),
rep_length = 1, ...) {
layer(
stat = StatColorTrail, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, alt_cols = alt_cols, rep_length= rep_length,...)
)
}
dat <- data.frame(x = seq(2,10, 2), y = seq(4, 20, 4))
ggplot(dat, aes(x, y)) +
stat_colortrail(alt_cols = c("black", "white", "green"), rep_length = .5)
?approx
#' @param n_approx # number of points at which interpolation takes place
#'   increase if line takes sharp turns
#' @param n_seg number of segments along line, according to taste
#' @param cols vector of segment colors
alt_colors <- function(df, "x", "y", n_approx = 100, n_seg = 40,
cols =c("red", "green", "blue")){
# interpolate
d = approx(dat$x, dat$y, n = n_approx)
# create start and end points for segments
d2 = data.frame(x = head(d$x, -1), xend = d$x[-1],
y = head(d$y, -1), yend = d$y[-1])
# create grouping variable for colors
d2$g = factor(cut(d2$x, n_seg, labels = FALSE) %% length(cols))
d2
}
styler:::style_selection()
#' @param n_approx # number of points at which interpolation takes place
#'   increase if line takes sharp turns
#' @param n_seg number of segments along line, according to taste
#' @param cols vector of segment colors
alt_colors <- function(df, x = "x", y = "y",
n_approx = 100,
n_seg = 40,
cols =c("red", "green", "blue")){
# interpolate
d = approx(dat$x, dat$y, n = n_approx)
# create start and end points for segments
d2 = data.frame(x = head(d$x, -1), xend = d$x[-1],
y = head(d$y, -1), yend = d$y[-1])
# create grouping variable for colors
d2$g = factor(cut(d2$x, n_seg, labels = FALSE) %% length(cols))
d2
}
air_df <- data.frame(x = 1: length(AirPassengers), y = c(AirPassengers))
alt_colors(air_df, "x", "y")
ggplot(alt_colors(air_df, "x", "y"), aes(x = x, xend = xend, y = y, yend = yend, color = g)) +
geom_segment() +
scale_color_manual(values = cols, guide = "none")
d2 <- alt_colors(air_df, "x", "y")
ggplot(d2, aes(x = x, xend = xend, y = y, yend = yend, color = g)) +
geom_segment() +
scale_color_manual(values = cols, guide = "none")
View(d2)
dat <- tibble(x = seq(2,10, 2), y = seq(4,20, 4))
dat <- data.frame(x = seq(2,10, 2), y = seq(4,20, 4))
p1 <-
alt_colors(dat, "x", "y", .5, )  %>%
ggplot(aes(x, y)) +
stat_colortrail(alt_cols = c("red", "blue"))
library(tidyverse)
ggplot(aes(x, y)) +
stat_colortrail(alt_cols = c("red", "blue"))
p1 <-
ggplot(dat, aes(x, y)) +
stat_colortrail(alt_cols = c("red", "blue"))
p1
p3 <- ggplot(dat, aes(x, y)) +
stat_colortrail(alt_cols = c("red", "blue", "green", "white"))
p3
p2 <- ggplot(dat, aes(x, y)) +
stat_colortrail(alt_cols = c("red", "blue", "green"))
ggplot(air_df, aes(x, y)) +
stat_colortrail(alt_cols = c("red", "blue", "green"))
S <- seq(0, 5, by = 0.05)
a <- S^2
b <- S
a_b <- a + b
df <- data.frame(x = S, a, b, a_b) %>%
pivot_longer(-x, names_to = "variable", values_to = "value")
ggplot(df, aes(x,y)) +
stat_colortrail()
ggplot(df, aes(x, value)) +
stat_colortrail()
library(ggtrail)
library(gitcreds)
gitcreds_get()
gitcreds_set()
gitcreds_set()
gitcreds_get()
gitcreds_approve()
gitcreds_get(url = "https://github.com/tjebo/ggtrail")
gitcreds_set(url = "https://github.com/tjebo/ggtrail")
usethis::create_github_token()
usethis::create_github_token()
library(ggrail)
library(ggtrail)
dat <- data.frame(x = seq(2,10, 2), y = seq(4,20, 4))
View(dat)
plot(dat)
ggplot(dat, aes(x, y)) +
stat_colortrail(alt_cols = c("red", "blue"))
StatColorTrail <- ggproto("StatColorTrail", Stat,
compute_group = function(data, scales, params, alt_cols = c("red", "green"),
rep_length = 1) {
## a function to create modifiable cuts in order to get segments.
## this looks convoluted - and it is! there are a few if/else statements.
## Why? The assigment of new y to x values depends on how many original values
## you have.
## There might be more direct ways to get there
x <- data$x
y <- data$y
## create new x for each tiny segment
length_seg <- rep_length / length(alt_cols)
new_x <- seq(min(x, na.rm = TRUE), x[length(x)], length_seg)
## now we need to interpolate y values for each new x
## This is different depending on how many x and new x you have
if (length(new_x) < length(x)) {
ind_int <- findInterval(new_x, x)
new_y <- sapply(seq_along(ind_int), function(i) {
if (y[ind_int[i]] == y[ind_int[length(ind_int)]]) {
y[ind_int[i]]
} else {
seq_y <- seq(y[ind_int[i]], y[ind_int[i] + 1], length.out = length(alt_cols))
head(seq_y, -1)
}
})
} else {
ind_int <- findInterval(new_x, x)
rle_int <- rle(ind_int)
new_y <- sapply(rle_int$values, function(i) {
if (y[i] == y[max(rle_int$values)]) {
y[i]
} else {
seq_y <- seq(y[i], y[i + 1], length.out = rle_int$lengths[i] + 1)
head(seq_y, -1)
}
})
}
## THis is also a bit painful and might cause other bugs that I haven't
## discovered yet.
if (length(unlist(new_y)) < length(new_x)) {
newdat <- data.frame(
x = new_x,
y = rep_len(unlist(new_y), length.out = length(new_x))
)
} else {
newdat <- data.frame(x = new_x, y = unlist(new_y))
}
newdat <- dplyr::mutate(newdat, xend = dplyr::lead(x), yend = dplyr::lead(y))
newdat <- tidyr::drop_na(newdat, xend)
newdat$color <- alt_cols
newdat
},
required_aes = c("x", "y")
)
stat_colortrail <- function(mapping = NULL, data = NULL, geom = "segment",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, alt_cols = c("red", "green"),
rep_length = 1, ...) {
layer(
stat = StatColorTrail, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, alt_cols = alt_cols, rep_length= rep_length,...)
)
}
ggplot(dat, aes(x, y)) +
stat_colortrail(alt_cols = c("red", "blue"))
library(ggtrail)
dat <- data.frame(x = seq(2,10, 2), y = seq(4,20, 4))
ggplot(dat, aes(x, y)) +
stat_colortrail(alt_cols = c("red", "blue"))
library(ggplot(data, aes(aes)) +
geom_geom())
library(ggplot2)
ggplot(dat, aes(x, y)) +
stat_colortrail(alt_cols = c("red", "blue"))
mean(1,2)
mean(1:2)
library(eye)
eye::va
install.packages("eye")
devtools::install_github("tjebo/ggtrail")
dat <- data.frame(x = seq(2,10, 2), y = seq(4,20, 4))
ggplot(dat, aes(x, y)) +
stat_colortrail(alt_cols = c("red", "blue"))
library(ggplot2)
ggplot(dat, aes(x, y)) +
stat_colortrail(alt_cols = c("red", "blue"))
ggplot(dat, aes(x, y)) +
eye:::stat_colortrail(alt_cols = c("red", "blue"))
library(eye)
library(eyedata)
amd2
eyes(amd2)
package_version("ggplot2")
packageVersion("ggplot2")
styler:::style_selection()
StatColorPath <- ggproto("StatColorPath", Stat,
compute_group = function(data, scales, params,
n_seg = 20, n = 100, cols = c("black", "white")) {
# interpolate
d <- approx(data$x, data$y, n = n)
# create start and end points for segments
d2 <- data.frame(
x = head(d$x, -1), xend = d$x[-1],
y = head(d$y, -1), yend = d$y[-1]
)
# create vector of segment colors
d2$color <- rep(cols, each = ceiling((n - 1) / n_seg), length.out = n - 1)
d2
},
required_aes = c("x", "y")
)
#' @rdname stat_colorpath
#' @import ggplot2
#' @inheritParams ggplot2::layer
#' @inheritParams ggplot2::geom_segment
#' @param n_seg number of segments along line, according to taste
#' @param n number of points at which interpolation takes place
#'   increase if line takes sharp turns
#' @param cols vector of alternating colors
#' @export
stat_colorpath <- function(mapping = NULL, data = NULL, geom = "segment",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, cols = c("black", "white"),
n_seg = 20, n = 100, ...) {
layer(
stat = StatColorPath, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, cols = cols, n = n, n_seg = n_seg,...)
)
}
dat <- data.frame(x = seq(2,10, 2), y = seq(4,20, 4))
ggplot(dat, aes(x = x, y = y)) +
stat_colorpath()
p2 <- ggplot(dat, aes(x, y)) +
stat_colorpath(cols = c("red", "blue"))
p3 <- ggplot(dat, aes(x, y)) +
stat_colorpath(alt_cols = c("red", "blue", "green"))
p4 <- ggplot(dat, aes(x, y)) +
stat_colorpath(alt_cols = c("red", "blue", "green", "white"))
p3 <- ggplot(dat, aes(x, y)) +
stat_colorpath(cols = c("red", "blue", "green"))
p4 <- ggplot(dat, aes(x, y)) +
stat_colorpath(cols = c("red", "blue", "green", "white"))
library(patchwork)
wrap_plots(mget(ls(pattern = "p[1-9]")))
p1 <- ggplot(dat, aes(x = x, y = y)) +
stat_colorpath()
p2 <- ggplot(dat, aes(x, y)) +
stat_colorpath(cols = c("red", "blue"))
p3 <- ggplot(dat, aes(x, y)) +
stat_colorpath(cols = c("red", "blue", "green"))
p4 <- ggplot(dat, aes(x, y)) +
stat_colorpath(cols = c("red", "blue", "green", "white"))
library(patchwork)
wrap_plots(mget(ls(pattern = "p[1-9]")))
air_df <- data.frame(x = 1: length(AirPassengers), y = c(AirPassengers))
ggplot(air_df, aes(x, y)) +
colorpath(alt_cols = c("red", "blue", "green"))
ggplot(air_df, aes(x, y)) +
ggtrail::colorpath(alt_cols = c("red", "blue", "green"))
ggplot(air_df, aes(x, y)) +
stat_colorpath(alt_cols = c("red", "blue", "green"))
ggplot(air_df, aes(x, y)) +
stat_colorpath(cols = c("red", "blue", "green"))
a2 <- ggplot(air_df, aes(x, y)) +
stat_colorpath(cols = c("red", "blue", "green"), n_seg = 50)
a1 <- ggplot(air_df, aes(x, y)) +
stat_colorpath(cols = c("red", "blue", "green"))
patchwork::wrap_plots(list(a1, a2))
a2 <- ggplot(air_df, aes(x, y)) +
stat_colorpath(cols = c("red", "blue", "green"), n_seg = 100)
patchwork::wrap_plots(list(a1, a2))
a2 <- ggplot(air_df, aes(x, y)) +
stat_colorpath(cols = c("red", "blue", "green"), n_seg = 150)
patchwork::wrap_plots(list(a1, a2))
library(patchwork)
a1 / a2
S <- seq(0, 5, by = 0.05)
a <- S^2
b <- S
a_b <- a + b
df <- data.frame(x = S, a, b, a_b) %>%
pivot_longer(-x, names_to = "variable", values_to = "value")
library(tidyverse)
y_leg <- ceiling(mean(range(df$value, na.rm = TRUE)))
dist_y <- 2
df <- data.frame(x = S, a, b, a_b) %>%
pivot_longer(-x, names_to = "variable", values_to = "value")
y_leg <- ceiling(mean(range(df$value, na.rm = TRUE)))
dist_y <- 2
df_legend <-
data.frame(
variable = rep(unique(df$variable), each = 2),
x = 1:2,
y = rep(seq(y_leg - dist_y, y_leg + dist_y, by = dist_y), each = 2)
)
df_legend %>%
filter(variable == "a_b") %>%
ggplot(aes(x, y)) +
stat_colorpath(cols = c("orange", "green"))
df_legend %>%
filter(variable == "a_b") %>%
ggplot(aes(x, y)) +
stat_colorpath(cols = c("orange", "green"), n_seg = 4)
styler:::style_selection()
geom_segment
geom_colorpath <- function (mapping = NULL, data = NULL, stat = "colorpath", position = "identity",
..., arrow = NULL, arrow.fill = NULL, lineend = "butt", linejoin = "round",
na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)
{
layer(data = data, mapping = mapping, stat = stat, geom = GeomSegment,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(arrow = arrow, arrow.fill = arrow.fill,
lineend = lineend, linejoin = linejoin, na.rm = na.rm,
...))
}
a2 <- ggplot(air_df, aes(x, y)) +
geom_colorpath(cols = c("red", "blue", "green"), n_seg = 150)
geom_colorpath <- function (mapping = NULL, data = NULL, stat = "ColorPath", position = "identity",
..., arrow = NULL, arrow.fill = NULL, lineend = "butt", linejoin = "round",
na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)
{
layer(data = data, mapping = mapping, stat = stat, geom = GeomSegment,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(arrow = arrow, arrow.fill = arrow.fill,
lineend = lineend, linejoin = linejoin, na.rm = na.rm,
...))
}
a2 <- ggplot(air_df, aes(x, y)) +
geom_colorpath(cols = c("red", "blue", "green"), n_seg = 150)
a2
library(ggtrail)
library(ggtrail)
library(ggtrail)
#' discrete gradient bar with separators, not ticks
#' @name guide_longticks
#' @param ... passed to guide_colorbar
#' @description from https://stackoverflow.com/a/62558606/7941188 teunbrand
#' @examples
ggplot(iris, aes(Sepal.Length, y = Sepal.Width, fill = Petal.Length))+
geom_point(shape = 21) +
scale_fill_fermenter(breaks = c(1:3,5,7), palette = "Reds") +
guides(fill = guide_longticks(
ticks = TRUE,
even.steps = FALSE,
frame.colour = "black",
ticks.colour = "black")) +
theme(legend.position = "bottom")
#' @export
guide_longticks <- function(...) {
guide <- guide_colorbar(...)
class(guide) <- c("guide", "guide_longticks", "colorbar")
guide
}
#' @keywords internal
guide_gengrob.guide_longticks <- function(guide, theme) {
dir <- guide$direction
guide <- NextMethod()
is_ticks <- grep("^ticks$", guide$layout$name)
ticks <- guide$grobs[is_ticks][[1]]
n <- length(ticks$x0)
if (dir == "vertical") {
ticks$x0 <- ticks$x0[1]
ticks$x1 <- ticks$x1[length(ticks$x1)]
} else {
ticks$y0 <- ticks$y0[1]
ticks$y1 <- ticks$y1[length(ticks$y1)]
}
guide$grobs[[is_ticks]] <- ticks
guide
}
#' discrete gradient bar with separators, not ticks
#' @name guide_longticks
#' @param ... passed to guide_colorbar
#' @description from https://stackoverflow.com/a/62558606/7941188 teunbrand
#' @examples
ggplot(iris, aes(Sepal.Length, y = Sepal.Width, fill = Petal.Length))+
geom_point(shape = 21) +
scale_fill_fermenter(breaks = c(1:3,5,7), palette = "Reds") +
guides(fill = guide_longticks(
ticks = TRUE,
even.steps = FALSE,
frame.colour = "black",
ticks.colour = "black")) +
theme(legend.position = "bottom")
library(ggtrail)
library(ggtrail)
library(ggtrail)
ggplot(iris, aes(Sepal.Length, y = Sepal.Width, fill = Petal.Length))+
geom_point(shape = 21) +
scale_fill_fermenter(breaks = c(1:3,5,7), palette = "Reds") +
guides(fill = guide_longticks(
ticks = TRUE,
even.steps = FALSE,
frame.colour = "black",
ticks.colour = "black")) +
theme(legend.position = "bottom")
ggplot(iris, aes(Sepal.Length, y = Sepal.Width, fill = Petal.Length))+
geom_point(shape = 21) +
scale_fill_fermenter(breaks = c(1:3,5,7), palette = "Reds") +
guides(fill = guide_longticks(
ticks = TRUE,
even.steps = FALSE,
frame.colour = "black",
ticks.colour = "black")) +
theme(legend.position = "bottom")
